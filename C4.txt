
19/06/2021

DEMONSTRATION OF ARRAY TO POINTERS

#include <stdio.h>

int main(){
int i;
int *ptr;
int a[5]={10,11,12,13,14};
ptr=&a[0];
printf("elements of arrat");
for(i=0;i<5;i++){
printf("%d\t",*(ptr+i));
}
    
    return 0;
}


2.

#include <stdio.h>

int main(){
int i;
int *ptr;
int n;
int a[5];

for(i=0;i<5;i++){
    printf("enetr elemrnt");
    scanf("%d",&a[i]);
}

ptr=&a[0];
printf("elements of arrat\n");
for(i=0;i<5;i++){
printf("%d\t",*(ptr+i));
}
    
  return 0; 
}

3.sum

#include <stdio.h>

int main(){
int i;
int *ptr;
int n;
int a[5];

for(i=0;i<5;i++){
    printf("enetr elemrnt");
    scanf("%d",&a[i]);
}

ptr=&a[0];
printf("elements of arrat\n");
for(i=0;i<5;i++){
printf("%d\t",*(ptr+i));
}
   int sum=0;
   for(i=0;i<5;i++){
       sum=sum+*(ptr+i);
   }
   printf("sum is%d",sum);
  return 0; 
}


5.PROGRAM TO DEMONSTRATE ARRAY OF POINTERS

int a=10;
int b=20;
int c=30;
int *x[10];
x[0]=&a;
x[1]=&b;
x[2]=&c;
printf("%d\t",*x[0]);
printf("%u\t",*x[0]);
printf("%d\t",*x[1]);
printf("%u\t",*x[1]);
printf("%d\t",*x[2]);
printf("%u",x[3]);
/*output
10	10	20	20	30	603299399*/



4.address

int *ptr;
int i;
int a[5]={10,11,12,13,14};
ptr=&a[0];
for(i=0;i<5;i++){
printf("%p\t",ptr+1);
}
for(i=0;i<5;i++){
printf("%d\t",*(ptr+1));
}


6.PASSING ELEMENTS TO FUNCTIONS


void disp(char ch){
printf("%c",ch);
}
int main(){
char arr[]={'a','d','c','d','e','f','g','h','i','j'};
for(int x=0;x<10;x++){
//i'm passing each element one by one using subscript
disp(arr[x]);
}


7.PASSING ARRAY ELEMENT ADDRESS TO FUNCTION-CALL BY REFERENCE


void disp(int *num){
printf("%d",*num);
}
int main(){
int arr[]={1,2,3,4,5,6,7,8,9,0};
for(int x=0;x<10;x++){
//i'm passing each element one by one using subscript
disp(&arr[x]);
}


8.PASSING ENTIRE ARRAY TO FUNCTIONS


void myfunction(int *var1,int var2)
{
for(int x=0;x<var2;x++){
printf("value of var_arr[%d] is:%d\n",x,*var1);
/*INCREMENT POINTER FOR NEXT ELEMENT FETCH*/
var1++;
}
}
int main{
int var_arr[]={11,22,33,44,55,66,77};
my function(var_arr,7);
return 0;
}


9.PASSING ENTIRE 2-D ARRAY TO FUNCTIONS

const int m=3;
const int n=3;
void print(int arr[m][n]){
int i,j;
for(int i=0;i<m;i++)
for(int j=0;j<n;j++)
printf("%d",arr[i][j]):
}
int main(){
int arr[][3]={{1,2,3},{4,5,6},{7,8,9}};
print(arr);
return 0;
}


2nd method:

const int n=3;
void print(int arr[][n],int m){
int i,j;
for(int i=0;i<m;i++)
for(int j=0;j<n;j++)
printf("%d",arr[i][j]):
}
int main(){
int arr[][3]={{1,2,3},{4,5,6},{7,8,9}};
print(arr,3);
return 0;
}


3.
void fun(int *arr,int m,int n){
int i,j;
for(i=0;i<m;i++){
for(j=0;j<n;j++)
printf("%d",*((arr+i*n)+j));
printf("\n");
}
}
int main(void){
int arr[][4]={{1,2,3,4},{4,5,6,7},{7,8,9,0}};
int m=3,n=4;//m-no.of rows,n-no.of columns
fun(&arr,m,n);
return 0;
}


MALLAOC


#include<stdlib.h>
int main(){
int *ptr;
ptr=malloc(15 * sizeof(*ptr));//a block of 15 integers
if(ptr!=NULL){
*(ptr+5)=480;//assign 480 to sixth integer
printf("value of 6th integer is %d",*(ptr+5));
}
return o;
}


CALLOC

#include<stdio.h>
#include<stdlib.h>
int main(){
int *numbers=(int*)calloc(4,sizeof(int));
int i;
number[0]=1;
number[1]=2;
number[2]=3;
printf("\nstored integers are");
for(i=0;i<4;i++)
printf("number[%d]=%d",i,numbers[i]);
return 0;
}



realloc


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main(){
char *ptr;
ptr=(char*)malloc(10);
strcpy(ptr,"programming");
printf("%s,address=%u\n",ptr,ptr);
ptr=(char *)realloc(ptr,20);//ptr is reallocated with new size
strcat(ptr,"\n'C'");
printf("%s,address=%u\n",ptr,ptr);
free(ptr);
}



21/06/2021

INSERTION

#include <stdio.h>
int main()
{
int arr[10];
int i, x, pos;
for (i = 0; i < 5; i++){
printf("enter element\n");
scanf("%d",a[i]);
}
printf("enetr position\n");
scanf("%d",&pos);
printf("enter element value\n");
scanf("%d",&x);
for(i=4;i>=pos;i--){
a[i+1]=a[i];
}
a[pos]=x;
for(i=0;i<5;i++){
printf("%d\n",a[i]);
}


DELETIONS

#include <stdio.h>
int main()
{
int arr[10];
int i, x, pos;
for (i = 0; i < 5; i++){
printf("enter element\n");
scanf("%d",&arr[i]);
}
printf("enetr position\n");
scanf("%d",&pos);

for(i=pos-1;i<5;i++){
arr[i]=arr[i+1];
}

for(i=0;i<4;i++){
printf("%d\n",arr[i]);
}
return 0;
}


STRINGS


int main(){
char str[5]="honey";
printf("%s\t",str);
return 0;
}


2.
#include <stdio.h>
int main(){
char str[10]="honey";
char str1[4];
char name[10]={'x','y','z'};
printf("%s\n",str);
scanf("%s",str1);
printf("%s",str1);
printf("%s",name);
return 0;
}


3.
int main(){
char name[20]="i am here :)";
char name1[20]={'s','a','m'};
printf("%s\t",name);
printf("%s",name1);

OUTPUT
i am here :)    sam


PASSING STRING TO A FUNCTION


void str_display(char name[20]){
printf("%s",name);
printf("you are correct");
}
int main(){
char name[20];
scanf("%s",name);
str_display(name);
return 0;
}
1.
INPUT
LAHARI
OUTPUT
LAHARIyou are correct
2.
HELLO SWEETY
HELLOyou are correct


2.
int main(){
//printf("tirus%spat%shi\n");
puts("tirus%spat%shi\n");
puts("good morning every one");
puts("is a nice place");


PUTS AND GETCHAR

1.
int main(){
char c;
c=getchar();
putchar();
}

2.
int main(){
fputs("hello",stdout);
puts("check");
}

GETS AND FGETS


int main(){
char s[30];
gets(s);//it like scanf
printf("%s",s);
return 0;

/*THE GETS() FUNCTION IS RISKY TO USE SINCE IT DOESN'T PERFORM ANY ARRAY 
BOUND CHECKING AND KEEP READIGN THE CHARECTERS UNTIL THE NEW LINE (ENTER) IS ENCOUNTERED.
/*IT SUFFERS FROM BUFFER FLOW, WHICH CAN BE AVOIDED BY USING FGETS(). THE FGETS() 
MAKES SURE THAT NOT MORE THAN THE MAXIMUM LIMIT OF CHARECTERSARE READ. 


int main(){
char a[30];
fgets(a,30,stdin):
printf("%s",a);
}
/*can use puts(a) instead of printf also



STRING POINTERS

//string variable
char str[6]="hello";
//pointer variable
char *ptr=str;
//print the string 
while(*ptr!='\0'){
printf("%c",*ptr);
//move the pointer to the next memory location 
ptr++;


ARRAY OF STRING OR 2D CHAR ARRAY

int main(){
char city[4][12]={"chennai","kolkata","mumbai","new delhi"};
printf("city are:\n");
for(int i=0;i<5;i++)
puts(city[i]);
return 0;
}


/*char language[][10]={"java","python","c++","hmtl","sql"};------valid
/*[5][]and [][]------in valid


//READ AND PRINT
int main(){
//declaring and initializing 2d string 
char language[5][10]={"java","python","c++","html","sql"};
//displaying strings
printf("language are:\n");
for(int i=0;i<5;i++)
puts(language[i]);
return 0;
}


//length of string 
int main(){
char str[200];
int i;
printf("enter thr string :");
scanf("%s",str);
for(i=0;str[i]!='\0';i++)}
printf("length of entered string is=%d",i);
}
return 0;
}


//length of string

int main(){
char a[100];int c=0;
printf("input string\n");
gets(a);
while(a[c]!='\0')
c++;
printf("length of the string=%d\n",c);
return 0;
}


ARRAY OF POINTERS TO STRINGS

int i=1;
char *sports[]={"golf","hockey","football","cricket","shooting"};
for(i=0;i<5;i++){
printf("string=%10s",sports[i]);
printf("\taddress of string literal=%u\n",sports[i]);
}
return 0;;
}


int main(){
char a[30];
scanf("%[^;]s",a);
printf("%s",a);
return 0;
}