22/06/2021
STANDARD STRING HANDLING FUNCTIONS

int main(){
char s[30]="sylvia charley";
char s1[30]="yohance samuel";
int l=strlen(s);
printf("length:%d",l);
return 0;
}
OUTPUT:
length:14


#include <stdio.h>
#include<string.h>
int main() {
    char s[30];
    printf("enetr the string");
    fgets(s,30,stdin);
    int l=strlen(s);
    printf("lentgh:%d",l);
    
    return 0;
}

INPUT:
sumana lahari
OUTPUT:
length is 14

# include<stdio.h>
# include<string.h>
int main(){
char s[30]="sumana lahari";
char s1[30]="anushkha shetty";
char copy[30];
int l=strlen(s);
printf("length:%d\t",l);
strcpy(copy,s);
printf("strcpy:%s",copy);
return 0;
}
OUTPUT:
length:13
strcpy:sumana lahari


# include<stdio.h>
# include<string.h>
int main(){
char s[30]="sumana lahari";
char s1[30]="anushkha shetty";

int l=strlen(s);
printf("length:%d\t",l);
strcpy(s,s1);
printf("strcpy:%s",s);
return 0;
}
OUTPUT:
length:13       strcpy:anushkha shetty

CONCATINATION
# include<stdio.h>
# include<string.h>
int main(){
char s[30]="sumana lahari";
char s1[30]="anushkha shetty";
char concat[100];
strcat(s,s1);
printf("after concatination%s",s);
return 0;
}



char a[5];
char b[7];
printf("enetr string1 to copy);
fgets(a,100,stdin);
printf("enetr string2 to copy);
fgets(b,100,stdin);
strcpy(a,b);
printf("strcpy %s",a);
return 0;
}


FGETS PROGRAM

char name1[30];
char name2[30];
fgets(name1,30,stdin);
fgets(name2,30,stdin);
puts(name1);//fputs(name1,stdout);
puts(name2);


STRCMP-it performs operatipns on asci values

//O/P-0 IF BOTH ARE EQUAL
//+VE IF END CHAR STR1>STR2
//-VE IF STR2>STR1

char name1[30];
char name2[30];
scanf("%s",name1);
scanf("%s",name2);
int cmp=strcmp(name1,name2);
printf("%d",cmp);

OUTPUT:
sumana
lahari
7

TO PRINT INDIVIDUAL CHARECTERS OF A STRING
1.
# include<stdio.h>
# include<string.h>
int main(){
char name1[30];
scanf("%s",name1);
for(int i=0;i<strlen(name1);i++){
printf("%c\t",name1[i]);
}
return 0;
}
OUTPUT:
sumana
s       u       m       a       n       a


2.
char str[100];
int i=0;
printf("input the string: ");
fgets(str,size of str,stdin);
//scanf("%s",str);
printf("the charecter of the string are:\n);
while(str[i]!='\0'){
printf("%c",str[i]);
i++;
}
printf("\n");

REVERSE OF STRING

# include<stdio.h>
# include<string.h>
int main(){
char name1[30];

scanf("%s",name1);
for(int i=strlen(name1);i<=strlen(name1);i--){
printf("%c",name1[i]);
}
return 0;
}
OUTPUT:
lahari
irahal


2.
char str[100];
int l,i;
printf("\n\nprint individual charecters of string in reverse order");
printf("-------------------------------\n");
printf("input the string:");
fgets(str,sizeof str,stdin);
l=strlen(str);
printf("the reverse string is:");
for(i=l;i>=0;i--){
printf("%c",str[i]);
}
printf("\n");


NO.OF WORDS

#include<string.h>
#include<stdio.h>
#define str_size 100
int main(){
char str[str_size];
int i,wrd;
printf("input the string");
fgets(str,sizeof str,stdin);
i=0;
wrd=0;
/*loop til end of the string*/
while(str[i]!='\0'){
if(str[i]==' '||str[i]=='\n'||str[i]=='\t'){
wrd++;
}
i++;
}
printf("total no.of words in string is:%d\n",wrd);
return 0;
}

2.
char c[30];
gets(c);
int i=0;
count=1;
while(i<strlen(c)){
if(c[i]==' ')
count++;
i++;
}
printf("%d",count);
return 0;
}


NO.OF ALPHA,DIGITS,SPECIALS


# include<stdio.h>
# include<string.h>
int main(){
char name1[30];
int alphabets=0;
int digits=0;
int specials=0;
scanf("%s",name1);
for(int i=0;i<=strlen(nam1);i++){
if(name1[i]>='a'&&name1[i]<='z'||name1[i]>='A'&&name1[i]<='Z'){
    alphabets++;
}
else if(name1[i]>='0'&&name1[i]<='9'){
    digits++;
}
else{
specials++;
}
}
printf("alphabets are %d\n digits are %d\n special charecters are %d",alphabets,digits,(specials-1));
return 0;
}

OUTPUT
sumana@123
alphabets are 6
 digits are 3
 special charecters are 1

SORT STRING ARRAY IN ASCENDING

char str[100],ch;
int i,j,l;
printf("input the string");
fgets(str,sizeof str,stdin);
l=strlen(str);
/*sorting process*/
for(i=1;i<l;i++)
for(j=0;j<l-1;j++)
if(str[j]>str[j+1]){
ch=str[j];
str[j]=str[j+1];
str[j+1]=ch;
}
printf("after sorting the string apears like:\n");
printf("%s\n\n",str);
}
OUTPUT
input the stringsumana
after sorting the string apears like:
aamnsu



23/06/2021

STRINGS


#include<stdio.h>
#include<string.h>
struct employee{
int id;
char name;
}e1;
int main(){
e1.id=2003;
strcpy(e1.name,"jasmine");
printf("emp id is:%d",e1.id);
printf("emp name is:%s",e1.name);
return 0;
}


2.
struct employee{
int id;
char namr[50];
float salary;
}e1,e2;
int main(){
e1.id=101;
strcpy(e1.name,lilly);
e1.salary=56000;
e2.id=102;
strcpy(e2.name,rose);
e2.126000;
printf("emp 1 id is:%d\n",e1.id);
printf("emp 1 name is:%s\n",e1.name);
printf("emp 1 salary is:%f\n",e1.salary);
printf("emp 2 id is:%d\n",e2.id);
printf("emp 2 name is:%s\n",e2.name);
printf("emp 2 salary is:%f\n",e2.salary);
return 0;
}

3.
#include<stdio.h>
#include<string.h>
struct student{
int id1;
int id2;
char a;
char b;
float percentage;
};
int main(){
//int i;
struct student record1={1,2,'A','B',90,5};
printf("size of structure in bytes : %d\n",sizeof(record1));
printf("\naddress of id1 =%u",record1.id1);
printf("\naddress of id2 =%u",record1.id2);
printf("\naddress of a =%u",&record1.a);
printf("\naddress of b =%u",&record1.b);
printf("\naddress of percentage=%u",&record1.percentage);
return 0;
}


ARRAY OF STRUCTURES

#include<stdio.h>
#include <string.h>
struct student{
int rollnum;
char name;
};
int main(){
int i;
struct student st[5];
printf("enter records of 5 members");
for(i=0;i<5;i++){
printf("\n enter rollnum");
scanf("%d",st[i].rollnum);
printf("\nenter name");
scanf("%s",st[i].name);
}
printf("\n student information list");
for(i=0;i<5;i++){
printf("\nrollnumber:%d,name:%s",st[i].rollnum,st[i].name);
return 0;
}


ARRAY WITHIN THE STRUCTURE

#include<stdio.h>
#include <string.h>
struct candidate{
int rollnum;
char grade;
//array within the structure
float marks[4];
};
//function to display the content of the structure variables
void display(struct candidate a1){
printf("roll num :%d\n",a1.rollnum);
printf("grade : %c\n",a1.grade);
printf("marks secured:\n");
int i;
int len=sizeof(a1.marks)/sizeof(float);
//accessing the content of the array within the structure
for(i=0;i<len;i++){
printf("subject %d : %2f\n",i+1,a1.marks[i]);
}
}
int main(){
//initialize structure
struct candidate A={1,'A',{98.5,77,89,78.5}};
//functions to display structures
display(A);
}

OUTPUT
roll num :1
grade : A
marks secured:
subject 1 : 98.500000
subject 2 : 77.000000
subject 3 : 89.000000
subject 4 : 78.500000


ANONYMOUS STRUCTURE

struct point {
//annonymous structure
struct{
int x;
int y;
};
};
int main(){
struct point pt;
{
pt.x=10;
pt.y=20;
printf("point (%d,%d)",pt.x,pt.y);
//anonymous members
}


NESTED STRUCTURE

struct address{
char city[20];
int pin;
};
struct employee{
char name[20];
struct address add;
};
int main(){
struct employee emp;
printf("enter employee information?\n");
scanf("%s%s%d",emp.name,emp.add.city,&emp.add.pin);
printf("printing the employee information---\n");
printf("name: %s\ncity: %s\n pincode:%d\n phone :%d",emp.name,emp.city,emp.add.pin,emp.add.phone);
}


POINTERS IN STRUCTURES

struct person{
int age;
float weight;
};
int main(){
struct person *personptr,person1;
personptr=&person1;
printf("enter age : ");
scanf("%d",&personptr->age);
printf("enetr weight");
scanf("%f",&personptr->weight);
printf("displaying:\n");
printf("age %d :",personptr->age);
printf("weight %f :",personptr->weight);
}

OUTPUT:
enter age : 26
enetr weight : 58
displaying:
age 26 
weight 58.000000 

SELF REFERENCIAL STRUCTURES

struct node{
int data1;
char data2;
sruct node* link;
};
int main(){
struct node ob1;//node 1
//initialization
ob1.link=NULL;
ob1.data1=10;
ob1.data2=20;
struct node ob2;//node2
//initialization
ob2.link=NULL;
ob1.data1=30;
ob1.data2=40;
//linking ob 1 and 2
ob1.link=&ob2;
//Accessing data members of ob2 using ob1
printf("%d"ob1.link->data1);
printf("\n%d"ob1.link->data2);
return 0;
}


